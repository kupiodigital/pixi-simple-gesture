'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pinchable;
function pinchable(sprite, inertia) {

  function start(e) {
    sprite.on('touchmove', move);
  }

  function move(e) {
    var t = e.data.originalEvent.targetTouches;
    if (!t || t.length < 2) {
      return;
    }
    var dx = t[0].clientX - t[1].clientX;
    var dy = t[0].clientY - t[1].clientY;
    var distance = Math.sqrt(dx * dx + dy * dy);
    if (!sprite._pinch) {
      sprite._pinch = {
        p: {
          distance: distance,
          date: new Date()
        }
      };
      sprite.emit('pinchstart');
      return;
    }
    var now = new Date();
    var interval = now - sprite._pinch.p.date;
    if (interval < 12) {
      return;
    }
    var center = {
      x: (t[0].clientX + t[1].clientX) / 2,
      y: (t[0].clientY + t[1].clientY) / 2
    };
    var event = {
      scale: distance / sprite._pinch.p.distance,
      velocity: distance / interval,
      center: center,
      data: e.data
    };
    sprite.emit('pinchmove', event);
    sprite._pinch.pp = {
      distance: sprite._pinch.p.distance,
      date: sprite._pinch.p.date
    };
    sprite._pinch.p = {
      distance: distance,
      date: now
    };
  }

  function end(e) {
    sprite.removeListener('touchmove', move);
    if (!sprite._pinch) {
      return;
    }
    if (inertia && sprite._pinch.pp) {
      if (sprite._pinch.intervalId) {
        return;
      }
      var interval = new Date() - sprite._pinch.p.date;
      var velocity = (sprite._pinch.p.distance - sprite._pinch.pp.distance) / interval;
      var center = sprite._pinch.p.center;
      var distance = sprite._pinch.p.distance;
      sprite._pinch.intervalId = setInterval(function () {
        if (Math.abs(velocity) < 0.04) {
          clearInterval(sprite._pinch.intervalId);
          sprite.emit('pinchend');
          sprite._pinch = null;
          return;
        }
        var updatedDistance = distance + velocity * 12;
        var event = {
          scale: updatedDistance / distance,
          velocity: velocity,
          center: center,
          data: e.data
        };
        sprite.emit('pinchmove', event);
        distance = updatedDistance;
        velocity *= 0.8;
      }, 12);
    } else {
      sprite.emit('pinchend');
      sprite._pinch = null;
    }
  }

  sprite.interactive = true;
  sprite.on('touchstart', start).on('touchend', end).on('touchendoutside', end);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZXN0dXJlcy9waW5jaC5qcyJdLCJuYW1lcyI6WyJwaW5jaGFibGUiLCJzcHJpdGUiLCJpbmVydGlhIiwic3RhcnQiLCJlIiwib24iLCJtb3ZlIiwidCIsImRhdGEiLCJvcmlnaW5hbEV2ZW50IiwidGFyZ2V0VG91Y2hlcyIsImxlbmd0aCIsImR4IiwiY2xpZW50WCIsImR5IiwiY2xpZW50WSIsImRpc3RhbmNlIiwiTWF0aCIsInNxcnQiLCJfcGluY2giLCJwIiwiZGF0ZSIsIkRhdGUiLCJlbWl0Iiwibm93IiwiaW50ZXJ2YWwiLCJjZW50ZXIiLCJ4IiwieSIsImV2ZW50Iiwic2NhbGUiLCJ2ZWxvY2l0eSIsInBwIiwiZW5kIiwicmVtb3ZlTGlzdGVuZXIiLCJpbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJhYnMiLCJjbGVhckludGVydmFsIiwidXBkYXRlZERpc3RhbmNlIiwiaW50ZXJhY3RpdmUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUF3QkEsUztBQUFULFNBQVNBLFNBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCQyxPQUE1QixFQUFxQzs7QUFFbEQsV0FBU0MsS0FBVCxDQUFnQkMsQ0FBaEIsRUFBbUI7QUFDakJILFdBQU9JLEVBQVAsQ0FBVSxXQUFWLEVBQXVCQyxJQUF2QjtBQUNEOztBQUVELFdBQVNBLElBQVQsQ0FBZUYsQ0FBZixFQUFrQjtBQUNoQixRQUFJRyxJQUFJSCxFQUFFSSxJQUFGLENBQU9DLGFBQVAsQ0FBcUJDLGFBQTdCO0FBQ0EsUUFBSSxDQUFDSCxDQUFELElBQU1BLEVBQUVJLE1BQUYsR0FBVyxDQUFyQixFQUF3QjtBQUN0QjtBQUNEO0FBQ0QsUUFBSUMsS0FBS0wsRUFBRSxDQUFGLEVBQUtNLE9BQUwsR0FBZU4sRUFBRSxDQUFGLEVBQUtNLE9BQTdCO0FBQ0EsUUFBSUMsS0FBS1AsRUFBRSxDQUFGLEVBQUtRLE9BQUwsR0FBZVIsRUFBRSxDQUFGLEVBQUtRLE9BQTdCO0FBQ0EsUUFBSUMsV0FBV0MsS0FBS0MsSUFB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QUFaO0FBTUFQLGVBQU9zQixJQUFQLENBQVksV0FBWixFQUF5Qk0sS0FBekI7QUFDQWIsbUJBQVd1QixlQUFYO0FBQ0FSLG9CQUFZLEdBQVo7QUFDRCxPQWpCMEIsRUFpQnhCLEVBakJ3QixDQUEzQjtBQWtCRCxLQTFCRCxNQTBCTztBQUNMOUIsYUFBT3NCLElBQVAsQ0FBWSxVQUFaO0FBQ0F0QixhQUFPa0IsTUFBUCxHQUFnQixJQUFoQjtBQUNEO0FBQ0Y7O0FBRURsQixTQUFPdUMsV0FBUCxHQUFxQixJQUFyQjtBQUNBdkMsU0FDR0ksRUFESCxDQUNNLFlBRE4sRUFDb0JGLEtBRHBCLEVBRUdFLEVBRkgsQ0FFTSxVQUZOLEVBRWtCNEIsR0FGbEIsRUFHRzVCLEVBSEgsQ0FHTSxpQkFITixFQUd5QjRCLEdBSHpCO0FBSUQiLCJmaWxlIjoicGluY2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwaW5jaGFibGUgKHNwcml0ZSwgaW5lcnRpYSkge1xyXG5cclxuICBmdW5jdGlvbiBzdGFydCAoZSkge1xyXG4gICAgc3ByaXRlLm9uKCd0b3VjaG1vdmUnLCBtb3ZlKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbW92ZSAoZSkge1xyXG4gICAgbGV0IHQgPSBlLmRhdGEub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzXHJcbiAgICBpZiAoIXQgfHwgdC5sZW5ndGggPCAyKSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgbGV0IGR4ID0gdFswXS5jbGllbnRYIC0gdFsxXS5jbGllbnRYXHJcbiAgICBsZXQgZHkgPSB0WzBdLmNsaWVudFkgLSB0WzFdLmNsaWVudFlcclxuICAgIGxldCBkaXN0YW5jZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSlcclxuICAgIGlmICghc3ByaXRlLl9waW5jaCkge1xyXG4gICAgICBzcHJpdGUuX3BpbmNoID0ge1xyXG4gICAgICAgIHA6IHtcclxuICAgICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZSxcclxuICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgc3ByaXRlLmVtaXQoJ3BpbmNoc3RhcnQnKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpXHJcbiAgICBsZXQgaW50ZXJ2YWwgPSBub3cgLSBzcHJpdGUuX3BpbmNoLnAuZGF0ZVxyXG4gICAgaWYgKGludGVydmFsIDwgMTIpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBsZXQgY2VudGVyID0ge1xyXG4gICAgICB4OiAodFswXS5jbGllbnRYICsgdFsxXS5jbGllbnRYKSAvIDIsXHJcbiAgICAgIHk6ICh0WzBdLmNsaWVudFkgKyB0WzFdLmNsaWVudFkpIC8gMlxyXG4gICAgfVxyXG4gICAgbGV0IGV2ZW50ID0ge1xyXG4gICAgICBzY2FsZTogZGlzdGFuY2UgLyBzcHJpdGUuX3BpbmNoLnAuZGlzdGFuY2UsXHJcbiAgICAgIHZlbG9jaXR5OiBkaXN0YW5jZSAvIGludGVydmFsLFxyXG4gICAgICBjZW50ZXI6IGNlbnRlcixcclxuICAgICAgZGF0YTogZS5kYXRhXHJcbiAgICB9XHJcbiAgICBzcHJpdGUuZW1pdCgncGluY2htb3ZlJywgZXZlbnQpXHJcbiAgICBzcHJpdGUuX3BpbmNoLnBwID0ge1xyXG4gICAgICBkaXN0YW5jZTogc3ByaXRlLl9waW5jaC5wLmRpc3RhbmNlLFxyXG4gICAgICBkYXRlOiBzcHJpdGUuX3BpbmNoLnAuZGF0ZVxyXG4gICAgfVxyXG4gICAgc3ByaXRlLl9waW5jaC5wID0ge1xyXG4gICAgICBkaXN0YW5jZTogZGlzdGFuY2UsXHJcbiAgICAgIGRhdGU6IG5vd1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW5kIChlKSB7XHJcbiAgICBzcHJpdGUucmVtb3ZlTGlzdGVuZXIoJ3RvdWNobW92ZScsIG1vdmUpXHJcbiAgICBpZiAoIXNwcml0ZS5fcGluY2gpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBpZiAoaW5lcnRpYSAmJiBzcHJpdGUuX3BpbmNoLnBwKSB7XHJcbiAgICAgIGlmIChzcHJpdGUuX3BpbmNoLmludGVydmFsSWQpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBsZXQgaW50ZXJ2YWwgPSBuZXcgRGF0ZSgpIC0gc3ByaXRlLl9waW5jaC5wLmRhdGVcclxuICAgICAgbGV0IHZlbG9jaXR5ID0gKHNwcml0ZS5fcGluY2gucC5kaXN0YW5jZSAtIHNwcml0ZS5fcGluY2gucHAuZGlzdGFuY2UpIC8gaW50ZXJ2YWxcclxuICAgICAgbGV0IGNlbnRlciA9IHNwcml0ZS5fcGluY2gucC5jZW50ZXJcclxuICAgICAgbGV0IGRpc3RhbmNlID0gc3ByaXRlLl9waW5jaC5wLmRpc3RhbmNlXHJcbiAgICAgIHNwcml0ZS5fcGluY2guaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBpZiAoTWF0aC5hYnModmVsb2NpdHkpIDwgMC4wNCkge1xyXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChzcHJpdGUuX3BpbmNoLmludGVydmFsSWQpXHJcbiAgICAgICAgICBzcHJpdGUuZW1pdCgncGluY2hlbmQnKVxyXG4gICAgICAgICAgc3ByaXRlLl9waW5jaCA9IG51bGxcclxuICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdXBkYXRlZERpc3RhbmNlID0gZGlzdGFuY2UgKyB2ZWxvY2l0eSAqIDEyXHJcbiAgICAgICAgbGV0IGV2ZW50ID0ge1xyXG4gICAgICAgICAgc2NhbGU6IHVwZGF0ZWREaXN0YW5jZSAvIGRpc3RhbmNlLFxyXG4gICAgICAgICAgdmVsb2NpdHk6IHZlbG9jaXR5LFxyXG4gICAgICAgICAgY2VudGVyOiBjZW50ZXIsXHJcbiAgICAgICAgICBkYXRhOiBlLmRhdGFcclxuICAgICAgICB9XHJcbiAgICAgICAgc3ByaXRlLmVtaXQoJ3BpbmNobW92ZScsIGV2ZW50KVxyXG4gICAgICAgIGRpc3RhbmNlID0gdXBkYXRlZERpc3RhbmNlXHJcbiAgICAgICAgdmVsb2NpdHkgKj0gMC44XHJcbiAgICAgIH0sIDEyKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3ByaXRlLmVtaXQoJ3BpbmNoZW5kJylcclxuICAgICAgc3ByaXRlLl9waW5jaCA9IG51bGxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNwcml0ZS5pbnRlcmFjdGl2ZSA9IHRydWVcclxuICBzcHJpdGVcclxuICAgIC5vbigndG91Y2hzdGFydCcsIHN0YXJ0KVxyXG4gICAgLm9uKCd0b3VjaGVuZCcsIGVuZClcclxuICAgIC5vbigndG91Y2hlbmRvdXRzaWRlJywgZW5kKVxyXG59XHJcbiJdfQ==