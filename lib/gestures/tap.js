'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = tappable;
function tappable(sprite) {
  function mouseDown(e) {
    start(e, e.data.originalEvent);
  }

  function touchStart(e) {
    if (e.data.originalEvent.targetTouches && e.data.originalEvent.targetTouches[0]) {
      start(e, e.data.originalEvent.targetTouches[0]);
    }
  }

  // possibly be called twice or more
  function start(e, t) {
    if (sprite._tap) {
      return;
    }
    sprite._tap = {
      p: {
        x: t.clientX,
        y: t.clientY
      }
    };
    sprite.on('mousemove', mouseMove).on('touchmove', touchMove);
  }

  function mouseMove(e) {
    move(e, e.data.originalEvent);
  }

  function touchMove(e) {
    var t = e.data.originalEvent.targetTouches;
    if (!t || t.length > 1) {
      sprite._tap.canceled = true;
      end(e);
      return;
    }
    move(e, t[0]);
  }

  function move(e, t) {
    var dx = t.clientX - sprite._tap.p.x;
    var dy = t.clientY - sprite._tap.p.y;
    var distance = Math.sqrt(dx * dx + dy * dy);
    var threshold = t instanceof window.MouseEvent ? 2 : 7;
    if (distance > threshold) {
      sprite._tap.canceled = true;
    }
  }

  // possibly be called twice or more
  function end(e) {
    if (sprite._tap && !sprite._tap.canceled) {
      var event = {
        data: e.data
      };
      sprite.emit('simpletap', event);
    }
    sprite._tap = null;
    sprite.removeListener('mousemove', mouseMove).removeListener('touchmove', touchMove);
  }

  sprite.interactive = true;
  sprite.on('mousedown', mouseDown).on('touchstart', touchStart).on('mouseup', end).on('mouseupoutside', end).on('touchend', end).on('touchendoutside', end);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZXN0dXJlcy90YXAuanMiXSwibmFtZXMiOlsidGFwcGFibGUiLCJzcHJpdGUiLCJtb3VzZURvd24iLCJlIiwic3RhcnQiLCJkYXRhIiwib3JpZ2luYWxFdmVudCIsInRvdWNoU3RhcnQiLCJ0YXJnZXRUb3VjaGVzIiwidCIsIl90YXAiLCJwIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsIm9uIiwibW91c2VNb3ZlIiwidG91Y2hNb3ZlIiwibW92ZSIsImxlbmd0aCIsImNhbmNlbGVkIiwiZW5kIiwiZHgiLCJkeSIsImRpc3RhbmNlIiwiTWF0aCIsInNxcnQiLCJ0aHJlc2hvbGQiLCJ3aW5kb3ciLCJNb3VzZUV2ZW50IiwiZXZlbnQiLCJlbWl0IiwicmVtb3ZlTGlzdGVuZXIiLCJpbnRlcmFjdGl2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBQXdCQSxRO0FBQVQsU0FBU0EsUUFBVCxDQUFrQkMsTUFBbEIsRUFBMEI7QUFDdkMsV0FBU0MsU0FBVCxDQUFtQkMsQ0FBbkIsRUFBc0I7QUFDcEJDLFVBQU1ELENBQU4sRUFBU0EsRUFBRUUsSUFBRixDQUFPQyxhQUFoQjtBQUNEOztBQUVELFdBQVNDLFVBQVQsQ0FBb0JKLENBQXBCLEVBQXVCO0FBQ3JCLFFBQUlBLEVBQUVFLElBQUYsQ0FBT0MsYUFBUCxDQUFxQkUsYUFBckIsSUFBc0NMLEVBQUVFLElBQUYsQ0FBT0MsYUFBUCxDQUFxQkUsYUFBckIsQ0FBbUMsQ0FBbkMsQ0FBMUMsRUFBaUY7QUFDL0VKLFlBQU1ELENBQU4sRUFBU0EsRUFBRUUsSUFBRixDQUFPQyxhQUFQLENBQXFCRSxhQUFyQixDQUFtQyxDQUFuQyxDQUFUO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBLFdBQVNKLEtBQVQsQ0FBZUQsQ0FBZixFQUFrQk0sQ0FBbEIsRUFBcUI7QUFDbkIsUUFBSVIsT0FBT1MsSUFBWCxFQUFpQjtBQUNmO0FBQ0Q7QUFDRFQsV0FBT1MsSUFBUCxHQUFjO0FBQ1pDLFNBQUc7QUFDREMsV0FBR0gsRUFBRUksT0FESjtBQUVEQyxXQUFHTCxFQUFFTTtBQUZKO0FBRFMsS0FBZDtBQU1BZCxXQUNHZSxFQURILENBQ00sV0FETixFQUNtQkMsU0FEbkIsRUFFR0QsRUFGSCxDQUVNLFdBRk4sRUFFbUJFLFNBRm5CO0FBR0Q7O0FBRUQsV0FBU0QsU0FBVCxDQUFtQmQsQ0FBbkIsRUFBc0I7QUFDcEJnQixTQUFLaEIsQ0FBTCxFQUFRQSxFQUFFRSxJQUFGLENBQU9DLGFBQWY7QUFDRDs7QUFFRCxXQUFTWSxTQUFULENBQW1CZixDQUFuQixFQUFzQjtBQUNwQixRQUFJTSxJQUFJTixFQUFFRSxJQUFGLENBQU9DLGFBQVAsQ0FBcUJFLGFBQTdCO0FBQ0EsUUFBSSxDQUFDQyxDQUFELElBQU1BLEVBQUVXLE1BQUYsR0FBVyxDQUFyQixFQUF3QjtBQUN0Qm5CLGFBQU9TLElBQVAsQ0FBWVcsUUFBWixHQUF1QixJQUF2QjtBQUNBQyxVQUFJbkIsQ0FBSjtBQUNBO0FBQ0Q7QUFDRGdCLFNBQUtoQixDQUFMLEVBQVFNLEVBQUUsQ0FBRixDQUFSO0FBQ0Q7O0FBRUQsV0FBU1UsSUFBVCxDQUFjaEIsQ0FBZCxFQUFpQk0sQ0FBakIsRUFBb0I7QUFDbEIsUUFBSWMsS0FBS2QsRUFBRUksT0FBRixHQUFZWixPQUFPUyxJQUFQLENBQVlDLENBQVosQ0FBY0MsQ0FBbkM7QUFDQSxRQUFJWSxLQUFLZixFQUFFTSxPQUFGLEdBQVlkLE9BQU9TLElBQVAsQ0FBWUMsQ0FBWixDQUFjRyxDQUFuQztBQUNBLFFBQUlXLFdBQVdDLEtBQUtDLElBQUwsQ0FBVUosS0FBS0EsRUFBTCxHQUFVQyxLQUFLQSxFQUF6QixDQUFmO0FBQ0EsUUFBSUksWUFBYW5CLGFBQWFvQixPQUFPQyxVQUFyQixHQUFtQyxDQUFuQyxHQUF1QyxDQUF2RDtBQUNBLFFBQUlMLFdBQVdHLFNBQWYsRUFBMEI7QUFDeEIzQixhQUFPUyxJQUFQLENBQVlXLFFBQVosR0FBdUIsSUFBdkI7QUFDRDtBQUNGOztBQUVEO0FBQ0EsV0FBU0MsR0FBVCxDQUFhbkIsQ0FBYixFQUFnQjtBQUNkLFFBQUlGLE9BQU9TLElBQVAsSUFBZSxDQUFDVCxPQUFPUyxJQUFQLENBQVlXLFFBQWhDLEVBQTBDO0FBQ3hDLFVBQUlVLFFBQVE7QUFDVjFCLGNBQU1GLEVBQUVFO0FBREUsT0FBWjtBQUdBSixhQUFPK0IsSUFBUCxDQUFZLFdBQVosRUFBeUJELEtBQXpCO0FBQ0Q7QUFDRDlCLFdBQU9TLElBQVAsR0FBYyxJQUFkO0FBQ0FULFdBQ0dnQyxjQURILENBQ2tCLFdBRGxCLEVBQytCaEIsU0FEL0IsRUFFR2dCLGNBRkgsQ0FFa0IsV0FGbEIsRUFFK0JmLFNBRi9CO0FBR0Q7O0FBRURqQixTQUFPaUMsV0FBUCxHQUFxQixJQUFyQjtBQUNBakMsU0FDR2UsRUFESCxDQUNNLFdBRE4sRUFDbUJkLFNBRG5CLEVBRUdjLEVBRkgsQ0FFTSxZQUZOLEVBRW9CVCxVQUZwQixFQUdHUyxFQUhILENBR00sU0FITixFQUdpQk0sR0FIakIsRUFJR04sRUFKSCxDQUlNLGdCQUpOLEVBSXdCTSxHQUp4QixFQUtHTixFQUxILENBS00sVUFMTixFQUtrQk0sR0FMbEIsRUFNR04sRUFOSCxDQU1NLGlCQU5OLEVBTXlCTSxHQU56QjtBQU9EIiwiZmlsZSI6InRhcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRhcHBhYmxlKHNwcml0ZSkge1xyXG4gIGZ1bmN0aW9uIG1vdXNlRG93bihlKSB7XHJcbiAgICBzdGFydChlLCBlLmRhdGEub3JpZ2luYWxFdmVudClcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRvdWNoU3RhcnQoZSkge1xyXG4gICAgaWYgKGUuZGF0YS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMgJiYgZS5kYXRhLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXSkge1xyXG4gICAgICBzdGFydChlLCBlLmRhdGEub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gcG9zc2libHkgYmUgY2FsbGVkIHR3aWNlIG9yIG1vcmVcclxuICBmdW5jdGlvbiBzdGFydChlLCB0KSB7XHJcbiAgICBpZiAoc3ByaXRlLl90YXApIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBzcHJpdGUuX3RhcCA9IHtcclxuICAgICAgcDoge1xyXG4gICAgICAgIHg6IHQuY2xpZW50WCxcclxuICAgICAgICB5OiB0LmNsaWVudFlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3ByaXRlXHJcbiAgICAgIC5vbignbW91c2Vtb3ZlJywgbW91c2VNb3ZlKVxyXG4gICAgICAub24oJ3RvdWNobW92ZScsIHRvdWNoTW92ZSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1vdXNlTW92ZShlKSB7XHJcbiAgICBtb3ZlKGUsIGUuZGF0YS5vcmlnaW5hbEV2ZW50KVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdG91Y2hNb3ZlKGUpIHtcclxuICAgIGxldCB0ID0gZS5kYXRhLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1xyXG4gICAgaWYgKCF0IHx8IHQubGVuZ3RoID4gMSkge1xyXG4gICAgICBzcHJpdGUuX3RhcC5jYW5jZWxlZCA9IHRydWVcclxuICAgICAgZW5kKGUpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgbW92ZShlLCB0WzBdKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbW92ZShlLCB0KSB7XHJcbiAgICBsZXQgZHggPSB0LmNsaWVudFggLSBzcHJpdGUuX3RhcC5wLnhcclxuICAgIGxldCBkeSA9IHQuY2xpZW50WSAtIHNwcml0ZS5fdGFwLnAueVxyXG4gICAgbGV0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KVxyXG4gICAgbGV0IHRocmVzaG9sZCA9ICh0IGluc3RhbmNlb2Ygd2luZG93Lk1vdXNlRXZlbnQpID8gMiA6IDdcclxuICAgIGlmIChkaXN0YW5jZSA+IHRocmVzaG9sZCkge1xyXG4gICAgICBzcHJpdGUuX3RhcC5jYW5jZWxlZCA9IHRydWVcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHBvc3NpYmx5IGJlIGNhbGxlZCB0d2ljZSBvciBtb3JlXHJcbiAgZnVuY3Rpb24gZW5kKGUpIHtcclxuICAgIGlmIChzcHJpdGUuX3RhcCAmJiAhc3ByaXRlLl90YXAuY2FuY2VsZWQpIHtcclxuICAgICAgbGV0IGV2ZW50ID0ge1xyXG4gICAgICAgIGRhdGE6IGUuZGF0YVxyXG4gICAgICB9XHJcbiAgICAgIHNwcml0ZS5lbWl0KCdzaW1wbGV0YXAnLCBldmVudClcclxuICAgIH1cclxuICAgIHNwcml0ZS5fdGFwID0gbnVsbFxyXG4gICAgc3ByaXRlXHJcbiAgICAgIC5yZW1vdmVMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2VNb3ZlKVxyXG4gICAgICAucmVtb3ZlTGlzdGVuZXIoJ3RvdWNobW92ZScsIHRvdWNoTW92ZSlcclxuICB9XHJcblxyXG4gIHNwcml0ZS5pbnRlcmFjdGl2ZSA9IHRydWVcclxuICBzcHJpdGVcclxuICAgIC5vbignbW91c2Vkb3duJywgbW91c2VEb3duKVxyXG4gICAgLm9uKCd0b3VjaHN0YXJ0JywgdG91Y2hTdGFydClcclxuICAgIC5vbignbW91c2V1cCcsIGVuZClcclxuICAgIC5vbignbW91c2V1cG91dHNpZGUnLCBlbmQpXHJcbiAgICAub24oJ3RvdWNoZW5kJywgZW5kKVxyXG4gICAgLm9uKCd0b3VjaGVuZG91dHNpZGUnLCBlbmQpXHJcbn1cclxuIl19